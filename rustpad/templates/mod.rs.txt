use crate::event::GenericEvent;

#[derive(Debug, Copy, Clone)]
pub enum WarthogThrottleEvent{
    // begin button_events
    {% for event in button_events %}
    {{- event.pressed_name }},
    {{ event.released_name }},
    {% endfor %}
    // end button_events
    // begin two_way_events
    {% for event in two_way_events %}
    {{- event.high }},
    {{ event.neutral}},
    {% endfor %}
    //end two_way_events
    // begin three-way events
    {% for event in three_way_events %}
    {{- event.high.name }},
    {{ event.neutral }},
    {{ event.low.name }},
    {% endfor %}
    // end three_way_events

    // begin axies
    {% for event in axes %}
    {{- event.action.name}}(u32),
    {% endfor %}
    // end axies

    // Miscelaneous events
    Misc(u16, u16, u32),
    Unknown(u16, u16, u32),
    ButtonHeld(u16)
}

pub fn decode_warthog_throttle(event : GenericEvent) -> WarthogThrottleEvent{
    match event{
        GenericEvent::ButtonPressed(code)=> {
            match code{
                // begin button events
                {% for event in button_events %}
                {{- event.code -}}u16 => {(WarthogThrottleEvent::{{- event.pressed_name -}})},
                {% endfor %}
                // end button events

                // begin two-way switch events
                {% for event in two_way_events %}
                {{- event.code -}}u16 => {(WarthogThrottleEvent::{{- event.high -}})},
                {% endfor %}
                // end two-way switch events

                // begin three-way events
                {% for event in three_way_events %}
                {{- event.high.code -}}u16 => {(WarthogThrottleEvent::{{- event.high.name -}})},
                {{ event.low.code -}}u16 => {(WarthogThrottleEvent::{{- event.low.name -}})},
                {% endfor %}
                // end three-way events
                _ => {unreachable!()}
            }
        }

        GenericEvent::ButtonReleased(code) => {
            match code{
                // begin button events
                {% for event in button_events %}
                {{- event.code -}}u16 => {(WarthogThrottleEvent::{{- event.released_name -}})},
                {% endfor %}
                // end button events
                // begin two-way switch events
                {% for event in two_way_events %}
                {{- event.code -}}u16 => {(WarthogThrottleEvent::{{- event.neutral -}})},
                {% endfor %}
                // end two-way switch events


                // begin three-way events
                {% for event in three_way_events %}
                {{- event.high.code -}}u16 => {(WarthogThrottleEvent::{{- event.neutral -}})},
                {{ event.low.code}}u16 => {(WarthogThrottleEvent::{{ event.neutral -}})},
                {% endfor %}
                // end three-way events

                _ => {unreachable!()}
            }
        }
        GenericEvent::RelativeAxis(code,value) => {unreachable!()}
        GenericEvent::AbsoluteAxis(code,value) => {
                // begin Absolute axis events
            match code{
                {% for event in axes %}
                {{- event.action.code }}u16 => WarthogThrottleEvent::{{ event.action.name }}(value),
                {% endfor %}
                        // end Absolute axis events
                _ => {unreachable!()}
            }
        }

        GenericEvent::ButtonHeld(code) => {WarthogThrottleEvent::ButtonHeld(code)}

        GenericEvent::Misc(kind, id, value) => {
            WarthogThrottleEvent::Misc(kind, id, value)
        }
        GenericEvent::Unknown(kind, id, value) => {
            WarthogThrottleEvent::Unknown(kind, id, value)
        }
    }
}
