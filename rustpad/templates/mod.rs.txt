#[allow(dead_Code)]

use gilrs::EventType;
use gilrs::ev::Code;
const EVENT_MASK:u32 = 0x0000_FFFF;
trait GetEvent{
    fn get_code(self) -> u16;
}
impl GetEvent for Code{
    fn get_code(self) -> u16 {
        (self.into_u32() & EVENT_MASK) as u16
    }
}

#[derive(Debug, Copy, Clone)]
pub enum WarthogThrottleEvent{
    // begin button_events
    {% for event in button_events %}
    {{- event.pressed_name }},
    {{ event.released_name }},
    {% endfor %}
    // end button_events
    // begin two_way_events
    {% for event in two_way_events %}
    {{- event.high }},
    {{ event.neutral}},
    {% endfor %}
    //end two_way_events
    // begin three-way events
    {% for event in three_way_events %}
    {{- event.high.name }},
    {{ event.neutral }},
    {{ event.low.name }},
    {% endfor %}
    // end three_way_events

    // begin axies
    {% for event in axes %}
    {{- event.action.name}}(f32),
    {% endfor %}
    // end axies

    // Miscelaneous events
    Misc(u16, u16, u32),
    Unknown(u16, u16, u32),
    ButtonHeld(u16)
}

pub fn decode_warthog_throttle(event : EventType) -> Option<WarthogThrottleEvent>{
    match event{
        EventType::ButtonPressed(_, code)=> {
            match code.get_code(){
                // begin button events
                {% for event in button_events %}
                {{- event.code -}}u16 => {Some(WarthogThrottleEvent::{{- event.pressed_name -}})},
                {% endfor %}
                // end button events

                // begin two-way switch events
                {% for event in two_way_events %}
                {{- event.code -}}u16 => {Some(WarthogThrottleEvent::{{- event.high -}})},
                {% endfor %}
                // end two-way switch events

                // begin three-way events
                {% for event in three_way_events %}
                {{- event.high.code -}}u16 => {Some(WarthogThrottleEvent::{{- event.high.name -}})},
                {{ event.low.code -}}u16 => {Some(WarthogThrottleEvent::{{- event.low.name -}})},
                {% endfor %}
                // end three-way events
                _ => {None}
            }
        }

        EventType::ButtonReleased(_, code) => {
            match code.get_code(){
                // begin button events
                {% for event in button_events %}
                {{- event.code -}}u16 => {Some(WarthogThrottleEvent::{{- event.released_name -}})},
                {% endfor %}
                // end button events
                // begin two-way switch events
                {% for event in two_way_events %}
                {{- event.code -}}u16 => {Some(WarthogThrottleEvent::{{- event.neutral -}})},
                {% endfor %}
                // end two-way switch events


                // begin three-way events
                {% for event in three_way_events %}
                {{- event.high.code -}}u16 => {Some(WarthogThrottleEvent::{{- event.neutral -}})},
                {{ event.low.code}}u16 => {Some(WarthogThrottleEvent::{{ event.neutral -}})},
                {% endfor %}
                // end three-way events

                _ => {None}
            }
        }
        EventType::AxisChanged(_, value, code) => {
                // begin Absolute axis events
            match code.get_code(){
                {% for event in axes %}
                {{- event.action.code }}u16 => Some(WarthogThrottleEvent::{{ event.action.name }}(value)),
                {% endfor %}
                        // end Absolute axis events
                _ => {None}
            }
        }
        _ => None
    }
}


pub mod codes{
    pub enum Inputs{
        // begin button_events
        {% for event in button_events %}
        {{ event.pressed_name }},
        {% endfor %}
        // end button_events

        // begin two-way events
        {% for event in two_way_events %}
        {{ event.high }},
        {{ event.neutral }},
        {% endfor %}
        // end two-way events
    }
    pub fn get_code(input: Inputs) -> gilrs::ev::Code{
        match input {
            // begin button_events
            {% for event in button_events %}
            Inputs::{{ event.pressed_name }} => { serde_json::from_str("{\"kind\":1,\"code\":{{event.code}}}").unwrap()},
            {% endfor %}
            // end button_events

            // begin two-way events
            {% for event in two_way_events %}
            Inputs::{{ event.high }} | Inputs::{{ event.neutral }} => { serde_json::from_str("{\"kind\":1,\"code\":{{event.code}}}").unwrap()},

            {% endfor %}
            _ => unimplemented!()
        }
    }

}

